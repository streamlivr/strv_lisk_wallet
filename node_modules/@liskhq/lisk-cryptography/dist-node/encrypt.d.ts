/// <reference types="node" />
export declare const ARGON2_MEMORY = 2097023;
export declare enum Cipher {
    AES128GCM = "aes-128-gcm"
}
export declare enum KDF {
    ARGON2 = "argon2id",
    PBKDF2 = "PBKDF2"
}
export interface EncryptedMessageObject {
    readonly version: string;
    readonly ciphertext: string;
    readonly mac: string;
    readonly kdf: KDF;
    readonly kdfparams: {
        parallelism: number;
        iterations: number;
        memorySize: number;
        salt: string;
    };
    readonly cipher: Cipher;
    readonly cipherparams: {
        iv: string;
        tag: string;
    };
}
export declare const encryptAES128GCMWithPassword: (plainText: string | Buffer, password: string, options?: {
    kdf?: KDF | undefined;
    kdfparams?: {
        parallelism?: number | undefined;
        iterations?: number | undefined;
        memorySize?: number | undefined;
    } | undefined;
    getKey?: ((options: {
        password: string;
        salt: Buffer;
        iterations: number;
        parallelism: number;
        memorySize: number;
        hashLength: number;
    }) => Promise<Buffer>) | undefined;
} | undefined) => Promise<EncryptedMessageObject>;
export declare function decryptAES128GCMWithPassword(encryptedMessage: EncryptedMessageObject, password: string): Promise<Buffer>;
export declare function decryptAES128GCMWithPassword(encryptedMessage: EncryptedMessageObject, password: string, encoding: 'utf8' | 'utf-8', options?: {
    getKey?: (options: {
        password: string;
        salt: Buffer;
        iterations: number;
        parallelism: number;
        memorySize: number;
    }) => Promise<Buffer>;
}): Promise<string>;
export declare const encryptMessageWithPassword: (plainText: string | Buffer, password: string, options?: {
    kdf?: KDF | undefined;
    kdfparams?: {
        parallelism?: number | undefined;
        iterations?: number | undefined;
        memorySize?: number | undefined;
    } | undefined;
    getKey?: ((options: {
        password: string;
        salt: Buffer;
        iterations: number;
        parallelism: number;
        memorySize: number;
        hashLength: number;
    }) => Promise<Buffer>) | undefined;
} | undefined) => Promise<EncryptedMessageObject>;
export declare const decryptMessageWithPassword: typeof decryptAES128GCMWithPassword;
export declare const parseEncryptedMessage: (encryptedMessage: string) => EncryptedMessageObject;
export declare const stringifyEncryptedMessage: (encryptedMessage: EncryptedMessageObject) => string;
